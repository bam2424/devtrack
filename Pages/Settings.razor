@page "/settings"
@using Microsoft.AspNetCore.Identity
@inject IJSRuntime JSRuntime
@inject UserManager<IdentityUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager Navigation

<PageTitle>Settings - DevTrack</PageTitle>

<div class="d-flex justify-content-between align-items-center mb-4">
    <div>
        <h2 class="mb-1">Settings</h2>
        <p class="text-muted">Customize your DevTrack experience</p>
    </div>
</div>

<div class="row">
    <div class="col-lg-8 col-md-10">
        <!-- User Profile -->
        <div class="card mb-4">
            <div class="card-header">
                <h5 class="mb-0">
                    <i class="fas fa-user me-2"></i>Profile Information
                </h5>
            </div>
            <div class="card-body">
                @if (currentUser != null)
                {
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Email</label>
                                <input type="email" class="form-control" value="@currentUser.Email" readonly />
                                <div class="form-text">Your email address cannot be changed.</div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Username</label>
                                <input type="text" class="form-control" value="@currentUser.UserName" readonly />
                            </div>
                        </div>
                    </div>
                }
                else
                {
                    <div class="text-center text-muted py-4">
                        <i class="fas fa-user-slash fa-2x mb-2"></i>
                        <p>Not logged in</p>
                        <button @onclick="GoToMainScreen" class="btn btn-primary">Sign In</button>
                    </div>
                }
            </div>
        </div>

        <!-- Application Settings -->
        <div class="card mb-4">
            <div class="card-header">
                <h5 class="mb-0">
                    <i class="fas fa-cog me-2"></i>Preferences
                </h5>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-6">
                        <div class="mb-3">
                            <label class="form-label">Default Task View</label>
                            <select @bind="defaultTaskView" @bind:after="SavePreferences" class="form-select">
                                <option value="kanban">Kanban Board</option>
                                <option value="list">List View</option>
                            </select>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="mb-3">
                            <label class="form-label">Items per Page</label>
                            <select @bind="itemsPerPage" @bind:after="SavePreferences" class="form-select">
                                <option value="10">10</option>
                                <option value="25">25</option>
                                <option value="50">50</option>
                                <option value="100">100</option>
                            </select>
                        </div>
                    </div>
                </div>
                
                <div class="row">
                    <div class="col-md-6">
                        <div class="form-check mb-3">
                            <input class="form-check-input" type="checkbox" @bind="autoStartTimer" @bind:after="SavePreferences" id="autoStartTimer">
                            <label class="form-check-label" for="autoStartTimer">
                                Auto-start timer when task is started
                            </label>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-check mb-3">
                            <input class="form-check-input" type="checkbox" @bind="showCompletedTasks" @bind:after="SavePreferences" id="showCompletedTasks">
                            <label class="form-check-label" for="showCompletedTasks">
                                Show completed tasks by default
                            </label>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- About -->
        <div class="card">
            <div class="card-header">
                <h5 class="mb-0">
                    <i class="fas fa-info-circle me-2"></i>About DevTrack
                </h5>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-8">
                        <p class="mb-2"><strong>DevTrack</strong> - Modern Project Management</p>
                        <p class="text-muted mb-3">A comprehensive project management solution built with ASP.NET Core and Blazor.</p>
                        
                        <div class="d-flex gap-3 mb-3">
                            <div>
                                <small class="text-muted">Version</small>
                                <div class="fw-semibold">1.0.0</div>
                            </div>
                            <div>
                                <small class="text-muted">Framework</small>
                                <div class="fw-semibold">.NET 8</div>
                            </div>
                            <div>
                                <small class="text-muted">Database</small>
                                <div class="fw-semibold">SQLite</div>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-4 text-center">
                        <i class="fas fa-code fa-3x text-primary mb-2"></i>
                        <p class="small text-muted">Built with modern web technologies</p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    /* Dark theme styling */
    .card {
        background-color: var(--bg-primary);
        border: 1px solid var(--border-color);
    }
    
    .card-header {
        background-color: var(--bg-secondary);
        border-bottom: 1px solid var(--border-color);
    }
    
    .form-control, .form-select {
        background-color: var(--bg-secondary);
        border: 1px solid var(--border-color);
        color: var(--text-primary);
    }
    
    .form-control:focus, .form-select:focus {
        background-color: var(--bg-secondary);
        border-color: var(--accent-primary);
        box-shadow: 0 0 0 0.2rem rgba(99, 102, 241, 0.25);
        color: var(--text-primary);
    }
    
    .form-control[readonly] {
        background-color: var(--bg-tertiary);
        opacity: 0.7;
    }
    
    .form-check-input:checked {
        background-color: var(--accent-primary);
        border-color: var(--accent-primary);
    }
    
    .form-text {
        color: var(--text-secondary);
    }
    
    /* Better button spacing and layout */
    .d-flex.flex-column.flex-sm-row .btn {
        min-height: 44px;
        display: flex;
        align-items: center;
        justify-content: center;
    }
    
    @@media (max-width: 575.98px) {
        .d-flex.flex-column.flex-sm-row .btn {
            width: 100%;
            margin-bottom: 0;
        }
    }
</style>

@code {
    private IdentityUser? currentUser;
    private string defaultTaskView = "kanban";
    private string itemsPerPage = "25";
    private bool autoStartTimer = false;
    private bool showCompletedTasks = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadCurrentUser();
        await LoadUserPreferences();
    }

    private async Task LoadCurrentUser()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity?.IsAuthenticated == true)
        {
            currentUser = await UserManager.GetUserAsync(authState.User);
        }
    }

    private async Task LoadUserPreferences()
    {
        try
        {
            // Load preferences from localStorage
            defaultTaskView = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "defaultTaskView") ?? "kanban";
            itemsPerPage = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "itemsPerPage") ?? "25";
            
            var autoStartString = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "autoStartTimer");
            autoStartTimer = bool.TryParse(autoStartString, out var autoStart) && autoStart;
            
            var showCompletedString = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "showCompletedTasks");
            showCompletedTasks = !bool.TryParse(showCompletedString, out var showCompleted) || showCompleted; // Default to true
        }
        catch (Exception ex)
        {
            // Handle preferences loading error
        }
    }

    private async Task SavePreferences()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("localStorage.setItem", "defaultTaskView", defaultTaskView);
            await JSRuntime.InvokeVoidAsync("localStorage.setItem", "itemsPerPage", itemsPerPage);
            await JSRuntime.InvokeVoidAsync("localStorage.setItem", "autoStartTimer", autoStartTimer.ToString());
            await JSRuntime.InvokeVoidAsync("localStorage.setItem", "showCompletedTasks", showCompletedTasks.ToString());
        }
        catch (Exception ex)
        {
            // Handle preferences save error
        }
    }

    private void GoToMainScreen()
    {
        Navigation.NavigateTo("/", true);
    }
} 