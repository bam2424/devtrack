@page "/"
@using Microsoft.EntityFrameworkCore
@using DevTrack.Data
@using DevTrack.Models
@using Microsoft.AspNetCore.Identity
@inject DevTrackDbContext DbContext
@inject UserManager<IdentityUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager Navigation

<PageTitle>Dashboard - DevTrack</PageTitle>

<div class="fade-in">
    <!-- Welcome Header -->
    <div class="row mb-4">
        <div class="col-12">
            <div>
                <h2 class="mb-1">Welcome back! 👋</h2>
                <p class="text-muted mb-0">Here's what's happening with your projects today.</p>
            </div>
        </div>
    </div>

    @if (isLoading)
    {
        <div class="text-center py-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else
    {
        <!-- Stats Cards -->
        <div class="row mb-4">
            <div class="col-md-3 col-sm-6 mb-3">
                <div class="card">
                    <div class="card-body">
                        <div class="d-flex justify-content-between align-items-center">
                            <div>
                                <h6 class="text-muted mb-1">Total Projects</h6>
                                <h3 class="mb-0">@totalProjects</h3>
                            </div>
                            <div class="stats-icon stats-icon-primary">
                                <i class="fas fa-folder"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="col-md-3 col-sm-6 mb-3">
                <div class="card">
                    <div class="card-body">
                        <div class="d-flex justify-content-between align-items-center">
                            <div>
                                <h6 class="text-muted mb-1">Active Tasks</h6>
                                <h3 class="mb-0">@activeTasks</h3>
                            </div>
                            <div class="stats-icon stats-icon-warning">
                                <i class="fas fa-tasks"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="col-md-3 col-sm-6 mb-3">
                <div class="card">
                    <div class="card-body">
                        <div class="d-flex justify-content-between align-items-center">
                            <div>
                                <h6 class="text-muted mb-1">Completed</h6>
                                <h3 class="mb-0">@completedTasks</h3>
                            </div>
                            <div class="stats-icon stats-icon-success">
                                <i class="fas fa-check"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="col-md-3 col-sm-6 mb-3">
                <div class="card">
                    <div class="card-body">
                        <div class="d-flex justify-content-between align-items-center">
                            <div>
                                <h6 class="text-muted mb-1">Hours Logged</h6>
                                <h3 class="mb-0">@totalHours.ToString("F0")h</h3>
                            </div>
                            <div class="stats-icon stats-icon-info">
                                <i class="fas fa-clock"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Recent Projects & Activity -->
        <div class="row">
            <!-- Recent Projects -->
            <div class="col-lg-8 mb-4">
                <div class="card">
                    <div class="card-header">
                        <div class="d-flex justify-content-between align-items-center">
                            <h5 class="mb-0">Recent Projects</h5>
                            <a href="/projects" class="btn btn-outline-primary btn-sm">View All</a>
                        </div>
                    </div>
                    <div class="card-body">
                        @if (recentProjects.Any())
                        {
                            @foreach (var project in recentProjects)
                            {
                                var completionPercentage = GetProjectCompletionPercentage(project);
                                <div class="d-flex align-items-center p-3 mb-3 rounded" style="background-color: var(--bg-secondary);">
                                    <div class="project-icon @GetProjectIconClass(project)">
                                        <i class="fas fa-folder"></i>
                                    </div>
                                    <div class="flex-grow-1">
                                        <h6 class="mb-1">@project.Title</h6>
                                        <p class="text-muted mb-1">@GetProjectTaskSummary(project)</p>
                                        <div class="progress" style="height: 4px;">
                                            <div class="progress-bar @GetProgressBarClass(completionPercentage)" style="width: @(completionPercentage)%"></div>
                                        </div>
                                    </div>
                                    <div class="text-end">
                                        <small class="text-muted">@(completionPercentage)% complete</small>
                                        <br>
                                        <a href="/projects/@project.Id/kanban" class="btn btn-sm btn-outline-primary mt-1">View</a>
                                    </div>
                                </div>
                            }
                        }
                        else
                        {
                            <div class="text-center py-4">
                                <i class="fas fa-folder-open fa-3x text-muted mb-3"></i>
                                <h5>No projects yet</h5>
                                <p class="text-muted">Create your first project to get started</p>
                                <a href="/projects" class="btn btn-primary">Create Project</a>
                            </div>
                        }
                    </div>
                </div>
            </div>

            <!-- Recent Activity -->
            <div class="col-lg-4 mb-4">
                <div class="card">
                    <div class="card-header">
                        <h5 class="mb-0">Recent Activity</h5>
                    </div>
                    <div class="card-body">
                        @if (recentTasks.Any())
                        {
                            @foreach (var task in recentTasks.Take(4))
                            {
                                <div class="d-flex align-items-start mb-3">
                                    <div class="activity-icon @GetActivityIconClass(task)">
                                        <i class="@GetActivityIcon(task)"></i>
                                    </div>
                                    <div class="flex-grow-1">
                                        <p class="mb-1">@GetActivityMessage(task)</p>
                                        <small class="text-muted">@GetTimeAgo(task.UpdatedAt)</small>
                                    </div>
                                </div>
                            }
                        }
                        else
                        {
                            <div class="text-center py-3">
                                <i class="fas fa-history fa-2x text-muted mb-2"></i>
                                <p class="text-muted">No recent activity</p>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private bool isLoading = true;
    private string? currentUserId;
    
    // Dashboard stats
    private int totalProjects = 0;
    private int activeTasks = 0;
    private int completedTasks = 0;
    private double totalHours = 0;
    
    // Dashboard data
    private List<Project> recentProjects = new();
    private List<DevTask> recentTasks = new();
    private Dictionary<Guid, int> projectTaskCounts = new();
    private Dictionary<Guid, int> projectCompletedCounts = new();

    protected override async Task OnInitializedAsync()
    {
        await GetCurrentUser();
        await LoadDashboardData();
        isLoading = false;
    }

    private async Task GetCurrentUser()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity?.IsAuthenticated == true)
        {
            var user = await UserManager.GetUserAsync(authState.User);
            currentUserId = user?.Id;
        }
        
        // Redirect to login if user is not authenticated
        if (string.IsNullOrEmpty(currentUserId))
        {
            Navigation.NavigateTo("/Identity/Account/Login");
            return;
        }
    }

    private async Task LoadDashboardData()
    {
        try
        {
            if (string.IsNullOrEmpty(currentUserId)) return;

            // Load projects
            var projects = await DbContext.Projects
                .Where(p => p.UserId == currentUserId)
                .OrderByDescending(p => p.UpdatedAt)
                .ToListAsync();

            totalProjects = projects.Count;
            recentProjects = projects.Take(3).ToList();

            // Load tasks
            var tasks = await DbContext.Tasks
                .Include(t => t.Project)
                .Where(t => t.UserId == currentUserId)
                .ToListAsync();

            activeTasks = tasks.Count(t => !t.IsCompleted);
            completedTasks = tasks.Count(t => t.IsCompleted);
            recentTasks = tasks.OrderByDescending(t => t.UpdatedAt).Take(10).ToList();

            // Calculate project task counts
            projectTaskCounts = tasks.GroupBy(t => t.ProjectId)
                .ToDictionary(g => g.Key, g => g.Count());
            
            projectCompletedCounts = tasks.Where(t => t.IsCompleted).GroupBy(t => t.ProjectId)
                .ToDictionary(g => g.Key, g => g.Count());

            // Load time logs
            var timeLogs = await DbContext.TimeLogs
                .Where(tl => tl.Task.UserId == currentUserId && tl.EndTime != null)
                .ToListAsync();

            totalHours = timeLogs.Sum(tl => tl.EndTime.HasValue 
                ? (tl.EndTime.Value - tl.StartTime).TotalHours 
                : 0);
        }
        catch (Exception ex)
        {
            // Handle dashboard data loading error
        }
    }

    private int GetProjectCompletionPercentage(Project project)
    {
        var totalTasksCount = projectTaskCounts.GetValueOrDefault(project.Id, 0);
        if (totalTasksCount == 0) return 0;
        
        var completedTasksCount = projectCompletedCounts.GetValueOrDefault(project.Id, 0);
        return (int)Math.Round((double)completedTasksCount / totalTasksCount * 100);
    }

    private string GetProjectTaskSummary(Project project)
    {
        var totalTasks = projectTaskCounts.GetValueOrDefault(project.Id, 0);
        var completedTasks = projectCompletedCounts.GetValueOrDefault(project.Id, 0);
        var activeTasks = totalTasks - completedTasks;
        
        return $"{activeTasks} active task{(activeTasks != 1 ? "s" : "")} • {totalTasks} total";
    }

    private string GetProjectIconClass(Project project)
    {
        var completion = GetProjectCompletionPercentage(project);
        return completion switch
        {
            >= 75 => "project-icon-success",
            >= 50 => "project-icon-primary",
            >= 25 => "project-icon-warning",
            _ => "project-icon-primary"
        };
    }

    private string GetProgressBarClass(int percentage)
    {
        return percentage switch
        {
            >= 75 => "bg-success",
            >= 50 => "bg-primary",
            >= 25 => "bg-warning",
            _ => "bg-danger"
        };
    }

    private string GetActivityIconClass(DevTask task)
    {
        return task.IsCompleted switch
        {
            true => "activity-icon-success",
            false when task.Status == DevTrack.Models.TaskStatus.InProgress => "activity-icon-warning",
            _ => "activity-icon-primary"
        };
    }

    private string GetActivityIcon(DevTask task)
    {
        return task.IsCompleted switch
        {
            true => "fas fa-check",
            false when task.Status == DevTrack.Models.TaskStatus.InProgress => "fas fa-clock",
            _ => "fas fa-tasks"
        };
    }

    private string GetActivityMessage(DevTask task)
    {
        if (task.IsCompleted)
            return $"Task \"{task.Title}\" completed";
        else if (task.Status == DevTrack.Models.TaskStatus.InProgress)
            return $"Working on \"{task.Title}\"";
        else
            return $"Task \"{task.Title}\" created";
    }

    private string GetTimeAgo(DateTime dateTime)
    {
        var timeSpan = DateTime.UtcNow - dateTime;
        
        return timeSpan.TotalDays switch
        {
            >= 7 => $"{(int)(timeSpan.TotalDays / 7)} week{((int)(timeSpan.TotalDays / 7) != 1 ? "s" : "")} ago",
            >= 1 => $"{(int)timeSpan.TotalDays} day{((int)timeSpan.TotalDays != 1 ? "s" : "")} ago",
            _ => timeSpan.TotalHours switch
            {
                >= 1 => $"{(int)timeSpan.TotalHours} hour{((int)timeSpan.TotalHours != 1 ? "s" : "")} ago",
                _ => "Just now"
            }
        };
    }
}
